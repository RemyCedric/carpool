{"version":3,"sources":["app/api/agent.ts","features/sample/sampleSlice.ts","app/store.ts","features/sample/sample.tsx","app/layout/App.tsx","reportWebVitals.ts","index.tsx"],"names":["axios","defaults","baseURL","process","responseBody","response","data","requests","url","get","then","agent","Samples","List","getSamplesAsync","createAsyncThunk","a","sampleSlice","createSlice","name","initialState","value","samples","reducers","increment","state","decrement","incrementByAmount","action","payload","extraReducers","builder","addCase","fulfilled","length","actions","store","configureStore","reducer","sample","sampleReducer","Sample","useSelector","dispatch","useDispatch","useEffect","Typography","variant","Button","onClick","map","summary","temperatureC","App","Container","path","element","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"yPAIAA,IAAMC,SAASC,QAAUC,QAEzB,IAAMC,EAAe,SAAIC,GAAJ,OAAmCA,EAASC,MAE3DC,EACG,SAAIC,GAAJ,OAAoBR,IAAMS,IAAOD,GAAKE,KAAKN,IAcrCO,EAJD,CACVC,QALY,CACZC,KAAM,kBAAyBN,EAAuB,sBCD7CO,EAAkBC,YAAiC,yBAAjB,sBAA2C,sBAAAC,EAAA,+EAErEL,EAAMC,QAAQC,OAFuD,uIAO7EI,EAAcC,YAAY,CACnCC,KAAM,SACNC,aAd8B,CAC9BC,MAAO,EACPC,QAAS,IAaTC,SAAU,CACNC,UAAW,SAACC,GACRA,EAAMJ,OAAS,GAEnBK,UAAW,SAACD,GACRA,EAAMJ,OAAS,GAEnBM,kBAAmB,SAACF,EAAOG,GACvBH,EAAMJ,OAASO,EAAOC,UAG9BC,cAAe,SAACC,GACZA,EAAQC,QAAQlB,EAAgBmB,WAAW,SAACR,EAAOG,GAG/CH,EAAMJ,MAAQO,EAAOC,QAAQK,OAC7BT,EAAMH,QAAUM,EAAOC,c,EAKwBZ,EAAYkB,QAAxDX,E,EAAAA,UAAWE,E,EAAAA,UAEXT,G,EAFsBU,kBAEtBV,EAAf,SC7CamB,EAAQC,YAAe,CAChCC,QAAS,CACLC,OAAQC,K,yCCCD,SAASC,IAA8B,IAAD,EACtBC,aAAY,SAACjB,GAAD,OAAsBA,EAAMc,UAA3DlB,EADyC,EACzCA,MAAOC,EADkC,EAClCA,QACTqB,EAAWC,cAMjB,OAJAC,qBAAU,WACNF,EAAS7B,OACV,CAAC6B,IAGA,qCACI,eAACG,EAAA,EAAD,CAAYC,QAAQ,KAApB,yBAAsC1B,KACtC,cAAC2B,EAAA,EAAD,CAAQD,QAAQ,YAAYE,QAAS,kBAAMN,EAASnB,MAApD,uBAGA,cAACwB,EAAA,EAAD,CAAQD,QAAQ,YAAYE,QAAS,kBAAMN,EAASjB,MAApD,uBAGA,6BACKJ,EAAQ4B,KAAI,SAACX,GAAD,OACT,mCAAgCA,EAAOY,UAA9BZ,EAAOa,sBCRrBC,MAZf,WACI,OACI,mCACI,cAACC,EAAA,EAAD,UACI,cAAC,IAAD,UACI,cAAC,IAAD,CAAOC,KAAK,IAAIC,QAAS,cAACf,EAAD,aCI9BgB,G,YAZS,SAACC,GACjBA,GAAeA,aAAuBC,UACtC,8BAAqBjD,MAAK,YAAkD,IAA/CkD,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QACzDJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,QCGpBO,IAASC,OACL,cAAC,IAAMC,WAAP,UACI,cAAC,IAAD,UACI,cAAC,IAAD,CAAU/B,MAAOA,EAAjB,SACI,cAAC,EAAD,UAIZgC,SAASC,eAAe,SAM5BZ,M","file":"static/js/main.7132c333.chunk.js","sourcesContent":["import axios, { AxiosResponse } from 'axios';\nimport { Sample } from '../models/sample/sample';\n\n// Enter here the url of the api to contact\naxios.defaults.baseURL = process.env.REACT_APP_API_URL;\n\nconst responseBody = <T>(response: AxiosResponse<T>) => response.data;\n\nconst requests = {\n    get: <T>(url: string) => axios.get<T>(url).then(responseBody),\n    post: <T>(url: string, body: unknown) => axios.post<T>(url, body).then(responseBody),\n    put: <T>(url: string, body: unknown) => axios.put<T>(url, body).then(responseBody),\n    delete: <T>(url: string) => axios.delete<T>(url).then(responseBody),\n};\n\nconst Samples = {\n    List: (): Promise<Sample[]> => requests.get<Sample[]>('WeatherForecast'),\n};\n\nconst agent = {\n    Samples,\n};\n\nexport default agent;\n","/* eslint-disable no-empty */\nimport { createAsyncThunk, createSlice, PayloadAction } from '@reduxjs/toolkit';\nimport agent from '../../app/api/agent';\nimport { Sample } from '../../app/models/sample/sample';\n\nexport interface sampleState {\n    value: number;\n    samples: Sample[];\n}\n\nconst initialState: sampleState = {\n    value: 0,\n    samples: [],\n};\n\nexport const getSamplesAsync = createAsyncThunk<Sample[], void>('sample/getSamplesAsync', async () => {\n    try {\n        return await agent.Samples.List();\n    } finally {\n    }\n});\n\nexport const sampleSlice = createSlice({\n    name: 'sample',\n    initialState,\n    reducers: {\n        increment: (state) => {\n            state.value += 1;\n        },\n        decrement: (state) => {\n            state.value -= 1;\n        },\n        incrementByAmount: (state, action: PayloadAction<number>) => {\n            state.value += action.payload;\n        },\n    },\n    extraReducers: (builder) => {\n        builder.addCase(getSamplesAsync.fulfilled, (state, action) => {\n            // eslint-disable-next-line no-debugger\n            debugger;\n            state.value = action.payload.length;\n            state.samples = action.payload;\n        });\n    },\n});\n\nexport const { increment, decrement, incrementByAmount } = sampleSlice.actions;\n\nexport default sampleSlice.reducer;\n","import { configureStore } from '@reduxjs/toolkit';\nimport sampleReducer from '../features/sample/sampleSlice';\n\nexport const store = configureStore({\n    reducer: {\n        sample: sampleReducer,\n    },\n});\n\n// Infer the `RootState` and `AppDispatch` types from the store itself\nexport type RootState = ReturnType<typeof store.getState>;\n// Inferred type: {posts: PostsState, comments: CommentsState, users: UsersState}\nexport type AppDispatch = typeof store.dispatch;\n","import { Button, Typography } from '@mui/material';\nimport React, { useEffect } from 'react';\nimport { useSelector, useDispatch } from 'react-redux';\nimport { RootState } from '../../app/store';\nimport { decrement, getSamplesAsync, increment } from './sampleSlice';\n\nexport default function Sample(): React.ReactElement {\n    const { value, samples } = useSelector((state: RootState) => state.sample);\n    const dispatch = useDispatch();\n\n    useEffect(() => {\n        dispatch(getSamplesAsync());\n    }, [dispatch]);\n\n    return (\n        <>\n            <Typography variant=\"h4\">h4. Heading {value}</Typography>\n            <Button variant=\"contained\" onClick={() => dispatch(increment())}>\n                Increment\n            </Button>\n            <Button variant=\"contained\" onClick={() => dispatch(decrement())}>\n                Decrement\n            </Button>\n            <ul>\n                {samples.map((sample) => (\n                    <li key={sample.temperatureC}>${sample.summary}</li>\n                ))}\n            </ul>\n        </>\n    );\n}\n","import { Container } from '@mui/material';\nimport React from 'react';\nimport { Routes, Route } from 'react-router-dom';\nimport Sample from '../../features/sample/sample';\n\nfunction App(): React.ReactElement {\n    return (\n        <>\n            <Container>\n                <Routes>\n                    <Route path=\"/\" element={<Sample />} />\n                </Routes>\n            </Container>\n        </>\n    );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler): void => {\n    if (onPerfEntry && onPerfEntry instanceof Function) {\n        import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n            getCLS(onPerfEntry);\n            getFID(onPerfEntry);\n            getFCP(onPerfEntry);\n            getLCP(onPerfEntry);\n            getTTFB(onPerfEntry);\n        });\n    }\n};\n\nexport default reportWebVitals;\n","/* eslint-disable import/no-extraneous-dependencies */\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport { BrowserRouter } from 'react-router-dom';\nimport { Provider } from 'react-redux';\nimport { store } from './app/store';\nimport App from './app/layout/App';\nimport './index.css';\nimport './app/layout/styles.css';\n\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n    <React.StrictMode>\n        <BrowserRouter>\n            <Provider store={store}>\n                <App />\n            </Provider>\n        </BrowserRouter>\n    </React.StrictMode>,\n    document.getElementById('root'),\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}